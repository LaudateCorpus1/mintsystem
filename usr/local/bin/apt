#!/usr/bin/python3

import sys
import os


def usage():
    print("apt")
    print("Usage: apt command [options]")
    print("       apt help command [options]")
    print("")
    print("Commands:")
    print("  add-repository   - Add entries to apt sources.list")
    print("  autoclean        - Erase old downloaded archive files")
    print("  autoremove       - Remove automatically all unused packages")
    print("  build            - Build binary or source packages from sources")
    print("  build-dep        - Configure build-dependencies for source packages")
    print("  changelog        - View a package's changelog")
    print("  check            - Verify that there are no broken dependencies")
    print("  clean            - Erase downloaded archive files")
    print("  contains         - List packages containing a file")
    print("  content          - List files contained in a package")
    print("  deb              - Install a .deb package")
    print("  depends          - Show raw dependency information for a package")
    print("  dist-upgrade     - Same as 'full-upgrade'")
    print("  download         - Download the .deb file for a package")
    print("  edit-sources     - Edit /etc/apt/sources.list with your preferred text editor")
    print("  dselect-upgrade  - Follow dselect selections")
    print("  full-upgrade     - Upgrade the system by removing/installing/upgrading packages")
    print("  held             - List all held packages")
    print("  help             - Show help for a command")
    print("  hold             - Hold a package")
    print("  install          - Install/upgrade packages")
    print("  list             - List packages based on package names")
    print("  policy           - Show policy settings")
    print("  purge            - Remove packages and their configuration files")
    print("  recommends       - List missing recommended packages for a particular package")
    print("  rdepends         - Show reverse dependency information for a package")
    print("  reinstall        - Download and (possibly) reinstall a currently installed package")
    print("  remove           - Remove packages")
    print("  search           - Search for a package by name and/or expression")
    print("  show             - Display detailed information about a package")
    print("  source           - Download source archives")
    print("  sources          - Same as 'edit-sources'")
    print("  unhold           - Unhold a package")
    print("  update           - Download lists of new/upgradable packages")
    print("  upgrade          - Perform a safe upgrade")
    print("  version          - Show the installed version of a package")
    print("")
    print("This apt has Super Cow Powers")
    sys.exit(1)


# Commands supported by /usr/bin/apt (1.2.9)
APT_SUPPORTED = (
    "autoremove",
    "list",
    "search",
    "show",
    "install",
    "remove",
    "autoremove",
    "purge",
    "update",
    "upgrade",
    "full-upgrade",
    "edit-sources",
)

# Legacy apt commands which have equivalents in the new apt under different names
APT_EQUIVALENTS = {
    "dist-upgrade": "full-upgrade",
    "sources": "edit-sources"
}

if len(sys.argv) < 2:
    usage()

sudo = "sudo"
if os.getuid() == 0:
    sudo = ""

if os.environ.get("EDITOR") is not None:
    editor = os.environ.get("EDITOR")
else:
    editor = "/usr/bin/editor"

argcommand = sys.argv[1]
argsuffix = sys.argv[2:]
argoptions = ""

command = ""

show_help = False

if argcommand == "help":
    if len(sys.argv) < 3:
        usage()
    show_help = True
    argcommand = sys.argv[2]
    argsuffix = sys.argv[3:]

for argoption in argsuffix:
    argoptions = argoptions + " " + argoption

if argcommand in APT_SUPPORTED:
    aptcommand = "/usr/bin/apt"
    command = sudo + " " + aptcommand + " " + argcommand + argoptions
elif argcommand in APT_EQUIVALENTS.keys():
    aptcommand = "/usr/bin/apt"
    command = sudo + " " + aptcommand + " " + APT_EQUIVALENTS[argcommand] + argoptions
elif argcommand in ("clean", "dselect-upgrade", "build-dep", "check", "autoclean"):
    aptcommand = "apt-get"
    command = sudo + " " + aptcommand + " " + argcommand + argoptions
elif argcommand in ("source", "moo"):
    aptcommand = "apt-get"
    command = aptcommand + " " + argcommand + argoptions
elif argcommand in ("changelog"):
    aptcommand = "aptitude"
    command = aptcommand + " " + argcommand + argoptions
elif argcommand in ("recommends"):
    command = "/usr/lib/linuxmint/mintSystem/mint-apt-recommends.py " + argoptions
elif argcommand in ("reinstall"):
    aptcommand = "aptitude"
    command = sudo + " " + aptcommand + " " + argcommand + argoptions
elif argcommand in ("stats", "depends", "rdepends", "policy"):
    aptcommand = "apt-cache"
    command = aptcommand + " " + argcommand + argoptions
elif argcommand == "held":
    command = "apt-mark showhold"
elif argcommand == "contains":
    command = "dpkg -S" + argoptions + " | sort"
elif argcommand == "content":
    command = "dpkg -L" + argoptions + " | sort"
elif argcommand == "hold":
    command = "sudo apt-mark hold " + argoptions
elif argcommand == "unhold":
    command = "sudo apt-mark unhold " + argoptions
elif argcommand == "version":
    command = "/usr/lib/linuxmint/common/version.py" + argoptions
elif argcommand == "build":
    command = sudo + " dpkg-buildpackage" + argoptions
elif argcommand == "deb":
    command = sudo + " dpkg -i" + argoptions
elif argcommand == "download":
    command = "LC_ALL=C apt-cache depends " + argoptions + " |grep -v \"Conflicts:\|Replaces:\"|awk '{print $NF}'|sed -e 's/[<>]//g'|xargs aptitude download -r"
elif argcommand == "add-repository":
    command = sudo + " add-apt-repository" + argoptions
else:
    usage()

# Color highlighting
if argcommand in ("content", "version", "policy", "depends", "rdepends") and len(argoptions.strip()) > 1:
    command = command + " | highlight" + argoptions

if show_help:
    print("\"apt " + argcommand + argoptions + "\" is equivalent to \"" + command + "\"")
else:
    os.system(command)
